#!/bin/bash

#
# Run the OpenVPN server normally
#

if [ "$DEBUG" == "1" ]; then
  set -x
fi
set -e

echo -e "如果容器无法运行，请在运行前彻底删除容器挂载的路径(如果你有使用-v /demo/openvpn:/etc/openvpn)"

if [[ -z $server_addr ]];then
  echo -e "你必须向容器中定义server_addr变量"
  server_addr=0.0.0.0
  exit 1
else
  echo -e "为 ${server_addr} 生成配置文件"
  ovpn_genconfig -u udp://${server_addr}
fi

if [[ -d /etc/openvpn/pki ]];then
  echo -e "已经存在PKI目录，跳过PKI生成"
else
    echo -e "生成pki"
    #https://github.com/OpenVPN/easy-rsa
    echo -e "\n"|ovpn_initpki nopass
fi

if `find /etc/openvpn/pki -type f -name daocloud* >/dev/null `;then
  echo -e "文件已经存在,下面将重新生成demo客户端配置"
  find  /etc/openvpn/pki/ -type f -name daocloud* -exec rm -fr {} \;
  sed -i "/CN=daocloud-boe/d" /etc/openvpn/pki/index.txt
  easyrsa build-client-full daocloud-boe nopass
else
  echo -e "生成客户端配置文件"
  easyrsa build-client-full daocloud-boe nopass
fi

echo -e "导出客户端配置文件"
ovpn_getclient daocloud-boe > ${OPENVPN}/daocloud-boe.ovpn

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    iptables -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE || {
      iptables -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        iptables -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE || {
          iptables -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}


addArg "--config" "$OPENVPN/openvpn.conf"

source "$OPENVPN/ovpn_env.sh"

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
	# call function to setup iptables rules and routing
	# this allows rules to be customized by supplying
	# a replacement function in, for example, ovpn_env.sh
	setupIptablesAndRouting
fi

# Use a copy of crl.pem as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
if [ "$EASYRSA_PKI/crl.pem" -nt "$OPENVPN/crl.pem" ]; then
    cp -f "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
    chmod 644 "$OPENVPN/crl.pem"
fi

if [ -r "$OPENVPN/crl.pem" ]; then
    addArg "--crl-verify" "$OPENVPN/crl.pem"
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Enabling IPv6 Forwarding"
    # If this fails, ensure the docker container is run with --privileged
    # Could be side stepped with `ip netns` madness to drop privileged flag

    sysctl -w net.ipv6.conf.all.disable_ipv6=0 || echo "Failed to enable IPv6 support"
    sysctl -w net.ipv6.conf.default.forwarding=1 || echo "Failed to enable IPv6 Forwarding default"
    sysctl -w net.ipv6.conf.all.forwarding=1 || echo "Failed to enable IPv6 Forwarding"
fi

echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
#将进程放置到后台
exec nohup openvpn ${ARGS[@]} ${USER_ARGS[@]} &